{"version":3,"sources":["components/Button/Button.module.scss","Colors.tsx","components/Button/Button.tsx","ColorDemoButton.tsx","components/DelayedButton/DelayedButton.tsx","components/DelayedButton/useSteppedDelay.tsx","App.tsx","serviceWorker.ts","index.tsx","components/DelayedButton/DelayedButton.module.scss"],"names":["module","exports","button","TextColor","AccentColor","BLACK_ACCENTS","WHITE","YELLOW","MINT","accentToTextColor","accent","includes","BLACK","GRAY","Button","props","label","className","buttonProps","Object","objectWithoutProperties","react_default","a","createElement","assign","classNames","styles","ColorDemoButton","style","background","borderColor","color","MAX_STEPS","DEFAULT_DELAY","getBorderStepCssClass","step","DelayedButton","delay","disabled","steps","time","arguments","length","undefined","_useState","useState","_useState2","slicedToArray","progress","setProgress","useEffect","setTimeout","useSteppedDelay","shouldBeDisabled","delayedButton","App","Container_default","Row_default","Col_default","keys","map","accentKey","text","name","toUpperCase","slice","toLowerCase","labelStyles","display","fontWeight","fontSize","marginRight","marginBottom","headerStyle","letterSpacing","margin","lineHeight","key","xs","alignItems","marginLeft","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","border25","border50","border75","border100"],"mappings":"4EACAA,EAAAC,QAAA,CAAkBC,OAAA,kJCDNC,EAOAC,6GAPAD,wFAOAC,0KAmBZ,IAAMC,EAAgB,CAACD,EAAYE,MAAOF,EAAYG,OAAQH,EAAYI,MAEnE,SAASC,EAAkBC,GAC9B,OAAIL,EAAcM,SAASD,GAChBP,EAAUS,MAEjBF,IAAWN,EAAYS,KAChBV,EAAUU,KAEdV,EAAUG,kDCzBd,SAASQ,EAAOC,GAAoB,IAChCC,EAAoCD,EAApCC,MAAOC,EAA6BF,EAA7BE,UAAcC,EADWC,OAAAC,EAAA,EAAAD,CACIJ,EADJ,uBAEvC,OAAQM,EAAAC,EAAAC,cAAA,SAAAJ,OAAAK,OAAA,CAAQP,UAAWQ,IAAWC,IAAOxB,OAAQe,IAAgBC,GAAcF,GCHhF,SAASW,EAAgBZ,GAC5B,OACIM,EAAAC,EAAAC,cAACT,EAAD,CAAQE,MAAOD,EAAMC,OAASD,EAAML,OAAQkB,MAAO,CAC/CC,WAAYd,EAAML,OAClBoB,aFMwBpB,EENSK,EAAML,OFO3CA,IAAWN,EAAYE,MAChBF,EAAYS,KAEhBH,GETCqB,MAAOtB,EAAkBM,EAAML,WFKpC,IAA6BA,kCGP9BsB,EAAY,EACZC,EAAgB,KAEtB,SAASC,EAAsBC,GAC3B,OAAOT,IAAO,SAAkB,GAAPS,GAGtB,SAASC,EAAcrB,GAA2B,IAC9CC,EAAqDD,EAArDC,MAAOqB,EAA8CtB,EAA9CsB,MAAOC,EAAuCvB,EAAvCuB,SAAUrB,EAA6BF,EAA7BE,UAAcC,EADQC,OAAAC,EAAA,EAAAD,CACOJ,EADP,0CAE/CoB,ECnBH,SAAyBI,GAAoC,IAArBC,EAAqBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAN,IAAMG,EAChCC,mBAAS,GADuBC,EAAA3B,OAAA4B,EAAA,EAAA5B,CAAAyB,EAAA,GACzDI,EADyDF,EAAA,GAC/CG,EAD+CH,EAAA,GAShE,OANAI,oBAAU,WACFF,EAAWT,GACXY,WAAW,kBAAMF,EAAYD,EAAW,IAAIR,EAAOD,IAExD,CAACS,IAEGA,EDUMI,CAAgBpB,EAAWK,GAASJ,GAC3CoB,EAAmBf,GAAYH,IAASH,EAE9C,OACIX,EAAAC,EAAAC,cAAA,SAAAJ,OAAAK,OAAA,CAAQP,UAAWQ,IAAWC,IAAO4B,cAAepB,EAAsBC,GAAOlB,GACzEqB,SAAUe,GAAsBnC,GAAcF,GE4C/CuC,MAzDf,WACI,OACIlC,EAAAC,EAAAC,cAAA,OAAKN,UAAU,OACXI,EAAAC,EAAAC,cAACiC,EAAAlC,EAAD,KAEID,EAAAC,EAAAC,cAACkC,EAAAnC,EAAD,KACID,EAAAC,EAAAC,cAACmC,EAAApC,EAAD,KACID,EAAAC,EAAAC,cAACa,EAAD,CAAepB,MAAO,aAE1BK,EAAAC,EAAAC,cAACmC,EAAApC,EAAD,OAKAH,OAAOwC,KAAKvD,GAAawD,IAAI,SAACC,GAC1B,IAnBFC,EAmBQpD,EAAuBN,EAAoByD,GAC3CE,GApBRD,EAoB4BD,GAnBlCnB,OAAUoB,EAAK,GAAGE,cAAgBF,EAAKG,MAAM,GAAGC,cAAiBJ,EAqBnDK,EAAc,CAChBC,QAAS,QACTC,WAAY,IACZC,SAAU,OACVC,YAAa,OACbC,aAAc,KAGdC,EAAc,CACd1C,MAAOrB,EACPgE,cAAe,UACfC,OAAQ,IACRC,WAAY,KAEhB,OACIvD,EAAAC,EAAAC,cAACkC,EAAAnC,EAAD,CAAKuD,IAAKnE,GACNW,EAAAC,EAAAC,cAACmC,EAAApC,EAAD,CAAKwD,GAAI,GACLzD,EAAAC,EAAAC,cAAA,MAAIK,MAAO6C,GAAcV,IAE7B1C,EAAAC,EAAAC,cAACmC,EAAApC,EAAD,CAAKM,MAAO,CAACwC,QAAS,OAAQW,WAAY,WACtC1D,EAAAC,EAAAC,cAACI,EAAD,CAAiBX,MAAO+C,EAAMrD,OAAQA,IACtCW,EAAAC,EAAAC,cAAA,OAAKK,MAAO,CAACoD,WAAY,SACrB3D,EAAAC,EAAAC,cAAA,SAAOK,MAAOuC,GAAd,cACA9C,EAAAC,EAAAC,cAAA,YAAOb,IAEXW,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOK,MAAOuC,GAAd,QACA9C,EAAAC,EAAAC,cAAA,YAAOd,EAAkBC,YC9C7CuE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOlE,EAAAC,EAAAC,cAACiE,EAAD,MAASC,SAASC,eAAe,SDkI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCE1InBhG,EAAAC,QAAA,CAAkBqD,cAAA,qCAAA2C,SAAA,gCAAAC,SAAA,gCAAAC,SAAA,gCAAAC,UAAA","file":"static/js/main.3c14fdc2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__1GUE-\"};","export enum TextColor {\r\n    WHITE = '#fff',\r\n    GRAY = '#818181',\r\n    DARK = '#3e3e3e',\r\n    BLACK = '#000'\r\n}\r\n\r\nexport enum AccentColor {\r\n    PINK = '#e62553',\r\n    ORANGE = '#ff731e',\r\n    YELLOW = '#ffb81e',\r\n    MINT = '#00d999',\r\n    BLUE = '#4d7df9',\r\n    PURPLE = '#8e3df9',\r\n    GRAY = '#cbcbcb',\r\n    WHITE = '#fff',\r\n    BLACK = '#000'\r\n}\r\n\r\nexport function accentToBorderColor(accent: AccentColor) {\r\n    if (accent === AccentColor.WHITE) {\r\n        return AccentColor.GRAY;\r\n    }\r\n    return accent;\r\n}\r\n\r\nconst BLACK_ACCENTS = [AccentColor.WHITE, AccentColor.YELLOW, AccentColor.MINT];\r\n\r\nexport function accentToTextColor(accent: AccentColor) {\r\n    if (BLACK_ACCENTS.includes(accent)) {\r\n        return TextColor.BLACK;\r\n    }\r\n    if (accent === AccentColor.GRAY) {\r\n        return TextColor.GRAY;\r\n    }\r\n    return TextColor.WHITE;\r\n}\r\n","import React from 'react';\r\nimport styles from './Button.module.scss';\r\nimport classNames from 'classnames';\r\n\r\ntype HTMLButtonElementProps = React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\r\n\r\nexport type ButtonProps = {\r\n    label: string;\r\n} & HTMLButtonElementProps;\r\n\r\nexport function Button(props: ButtonProps) {\r\n    const {label, className, ...buttonProps} = props;\r\n    return (<button className={classNames(styles.button, className)} {...buttonProps}>{label}</button>);\r\n}\r\n","import {Button} from './components/Button';\r\nimport React from 'react';\r\nimport {AccentColor, accentToBorderColor, accentToTextColor} from './Colors';\r\n\r\ntype ColorButtonProps = {\r\n    accent: AccentColor;\r\n    label?: string;\r\n}\r\n\r\nexport function ColorDemoButton(props: ColorButtonProps) {\r\n    return (\r\n        <Button label={props.label || props.accent} style={{\r\n            background: props.accent,\r\n            borderColor: accentToBorderColor(props.accent),\r\n            color: accentToTextColor(props.accent)\r\n        }}/>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport {useSteppedDelay} from './useSteppedDelay';\r\nimport styles from './DelayedButton.module.scss';\r\n\r\ntype HTMLButtonElementProps = React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\r\ntype DelayedButtonProps = {\r\n    label: string;\r\n    delay?: number;\r\n    color?: string;\r\n} & HTMLButtonElementProps;\r\n\r\nconst MAX_STEPS = 5;\r\nconst DEFAULT_DELAY = 1333;\r\n\r\nfunction getBorderStepCssClass(step: number) {\r\n    return styles['border' + step * 25];\r\n}\r\n\r\nexport function DelayedButton(props: DelayedButtonProps) {\r\n    const {label, delay, disabled, className, ...buttonProps} = props;\r\n    const step = useSteppedDelay(MAX_STEPS, delay || DEFAULT_DELAY);\r\n    const shouldBeDisabled = disabled || step !== MAX_STEPS;\r\n\r\n    return (\r\n        <button className={classNames(styles.delayedButton, getBorderStepCssClass(step), className)}\r\n                disabled={shouldBeDisabled} {...buttonProps}>{label}</button>\r\n    );\r\n}\r\n","import {useEffect, useState} from 'react';\r\n\r\nexport function useSteppedDelay(steps: number, time: number = 1000) {\r\n    const [progress, setProgress] = useState(0);\r\n\r\n    useEffect(() => {\r\n        if (progress < steps) {\r\n            setTimeout(() => setProgress(progress + 1), time / steps);\r\n        }\r\n    }, [progress]);\r\n\r\n    return progress;\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport {AccentColor, accentToTextColor} from './Colors';\r\nimport {ColorDemoButton} from './ColorDemoButton';\r\nimport {DelayedButton} from './components/DelayedButton';\r\n\r\nfunction toPascalCase(text: string) {\r\n    return text.length ? (text[0].toUpperCase() + text.slice(1).toLowerCase()) : text;\r\n}\r\n\r\nfunction App() {\r\n    return (\r\n        <div className='App'>\r\n            <Container>\r\n\r\n                <Row>\r\n                    <Col>\r\n                        <DelayedButton label={'Delayed'}/>\r\n                    </Col>\r\n                    <Col>\r\n                    </Col>\r\n                </Row>\r\n\r\n                {\r\n                    Object.keys(AccentColor).map((accentKey: string) => {\r\n                        const accent: AccentColor = (AccentColor as any)[accentKey];\r\n                        const name = toPascalCase(accentKey);\r\n\r\n                        const labelStyles = {\r\n                            display: 'block',\r\n                            fontWeight: 700,\r\n                            fontSize: '12px',\r\n                            marginRight: '20px',\r\n                            marginBottom: '0'\r\n                        };\r\n\r\n                        let headerStyle = {\r\n                            color: accent,\r\n                            letterSpacing: '-0.08em',\r\n                            margin: '0',\r\n                            lineHeight: '2'\r\n                        };\r\n                        return (\r\n                            <Row key={accent}>\r\n                                <Col xs={3}>\r\n                                    <h1 style={headerStyle}>{name}</h1>\r\n                                </Col>\r\n                                <Col style={{display: 'flex', alignItems: 'center'}}>\r\n                                    <ColorDemoButton label={name} accent={accent}/>\r\n                                    <div style={{marginLeft: '20px'}}>\r\n                                        <label style={labelStyles}>Background</label>\r\n                                        <code>{accent}</code>\r\n                                    </div>\r\n                                    <div>\r\n                                        <label style={labelStyles}>Text</label>\r\n                                        <code>{accentToTextColor(accent)}</code>\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                        )\r\n                    })\r\n                }\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"delayedButton\":\"DelayedButton_delayedButton__1FEBD\",\"border25\":\"DelayedButton_border25__13oaM\",\"border50\":\"DelayedButton_border50__3tWlV\",\"border75\":\"DelayedButton_border75__2L3LA\",\"border100\":\"DelayedButton_border100__28QYL\"};"],"sourceRoot":""}